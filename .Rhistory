Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
.groups = 'drop'  # Supprime les groupes après le regroupement
)
jeu_donnees_grouped <- jeu_donnees_grouped[,2:4]
row.names(jeu_donnees_grouped) = 1:20 #= jeu_donnees_grouped["Publisher"]
# Afficher les 6 premières lignes du tableau regroupé
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
# Regrouper les données par Developer et calculer la somme des ventes par région
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
.groups = 'drop'  # Supprime les groupes après le regroupement
)
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = 1:20 #= jeu_donnees_grouped["Publisher"]
# Afficher les 6 premières lignes du tableau regroupé
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
# Regrouper les données par Developer et calculer la somme des ventes par région
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
.groups = 'drop'  # Supprime les groupes après le regroupement
)
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = 1:20 #= jeu_donnees_grouped["Publisher"]
attr(df, "row.names")
# Afficher les 6 premières lignes du tableau regroupé
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
View(election)
View(election)
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
# Regrouper les données par Developer et calculer la somme des ventes par région
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
.groups = 'drop'  # Supprime les groupes après le regroupement
)
#jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = jeu_donnees_grouped["Publisher"]
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
# Regrouper les données par Developer et calculer la somme des ventes par région
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
.groups = 'drop'  # Supprime les groupes après le regroupement
)
#jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = jeu_donnees_grouped[,"Publisher"]
View(jeu_donnees_grouped)
View(jeu_donnees_grouped)
View(jeu_donnees_grouped)
View(jeu_donnees_grouped)
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
# Regrouper les données par Developer et calculer la somme des ventes par région
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
.groups = 'drop'  # Supprime les groupes après le regroupement
)
#jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = jeu_donnees_grouped[,c("Publisher")]
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
# Regrouper les données par Developer et calculer la somme des ventes par région
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
#.groups = 'drop'  # Supprime les groupes après le regroupement
)
#jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = jeu_donnees_grouped[,c("Publisher")]
View(jeu_donnees_grouped)
View(jeu_donnees_grouped)
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
# Regrouper les données par Developer et calculer la somme des ventes par région
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
#.groups = 'drop'  # Supprime les groupes après le regroupement
)
#jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = jeu_donnees_grouped$Publisher
# Afficher les 6 premières lignes du tableau regroupé
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
View(jeu_donnees_grouped)
View(jeu_donnees_grouped)
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
# Regrouper les données par Developer et calculer la somme des ventes par région
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
#.groups = 'drop'  # Supprime les groupes après le regroupement
)
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = jeu_donnees$Publisher
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
)
row.names(jeu_donnees_grouped) = jeu_donnees_grouped$Publisher
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
View(jeu_donnees_grouped)
View(jeu_donnees_grouped)
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par développeur pour améliorer les liaisons entre 2 variables qualitatives (en comparant les différentes régions et les développeurs)
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
)
save <- jeu_donnees_grouped$Publisher
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = save
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
View(jeu_donnees_grouped)
View(jeu_donnees_grouped)
View(jeu_donnees_filtre)
View(jeu_donnees_filtre)
jeu_donnees_filtre1 <- jeu_donnees %>%
group_by(Genre) %>%
filter(n() >= 100)
jeu_donnees_grouped1 <- jeu_donnees_filtre1 %>%
group_by(Genre) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
)
save1 <- jeu_donnees_grouped1$Publisher
jeu_donnees_grouped1 <- jeu_donnees_grouped1[,2:5]
row.names(jeu_donnees_grouped1) = save1
head(jeu_donnees_grouped1)
chisq.test(jeu_donnees_grouped1)
View(jeu_donnees_grouped1)
View(jeu_donnees_grouped1)
jeu_donnees = read.csv("Video_Games_Sales_as_at_22_Dec_2016.csv")
jeu_donnees <- na.omit(jeu_donnees) # on enlève les "NA"
head(jeu_donnees)
jeu_donnees$User_Score <- as.numeric(jeu_donnees$User_Score)
library(dplyr)
# Pour l'ACP, c'est mieux de regrouper par Publisher pour améliorer les liaisons entre 2 variables qualitatives
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100)
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(NA_Sales, EU_Sales, Other_Sales, na.rm = TRUE),
)
save <- jeu_donnees_grouped$Publisher
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = save
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
# la p-value indique aucune liaisons entre ces 2 variables, il n'est pas nécessaire de faire l'AFC.
jeu_donnees_top <- jeu_donnees[jeu_donnees$Global_Sales >= 5.0,] # plus de 5M de ventes
sales_data_top = jeu_donnees_top[, c("NA_Sales", "EU_Sales", "JP_Sales", "Other_Sales")]
boxplot(sales_data_top)
boxplot(sales_data_top, ylim = c(0, 10))
chisq.test(sales_data_top)
library(dplyr)
# On regroupe les jeux par Publisher qu'on compare aux différentes régions.
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100) # Pour plus de pertinence, nous gardons ceux avec au moins 100 jeux dans le jeu de données.
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(Global_Sales, na.rm = TRUE),
)
save <- jeu_donnees_grouped$Publisher
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = save
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
# la p-value indique aucune liaisons entre ces 2 variables, il n'est pas nécessaire de faire l'AFC.
# Il y a peut-être une relation entre le genre de jeu et la région.
jeu_donnees_filtre1 <- jeu_donnees %>%
group_by(Genre) %>%
filter(n() >= 100)
jeu_donnees_grouped1 <- jeu_donnees_filtre1 %>%
group_by(Genre) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(Global_Sales, na.rm = TRUE),
)
save1 <- jeu_donnees_grouped1$Publisher
jeu_donnees_grouped1 <- jeu_donnees_grouped1[,2:5]
row.names(jeu_donnees_grouped1) = save1
head(jeu_donnees_grouped1)
chisq.test(jeu_donnees_grouped1)
# Il y a peut-être une relation entre le genre de jeu et la région.
jeu_donnees_filtre1 <- jeu_donnees %>%
group_by(Genre) %>%
filter(n() >= 100)
jeu_donnees_grouped1 <- jeu_donnees_filtre1 %>%
group_by(Genre) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(Global_Sales, na.rm = TRUE),
)
save1 <- jeu_donnees_grouped1$Genre
jeu_donnees_grouped1 <- jeu_donnees_grouped1[,2:5]
row.names(jeu_donnees_grouped1) = save1
head(jeu_donnees_grouped1)
chisq.test(jeu_donnees_grouped1)
View(jeu_donnees_grouped1)
View(jeu_donnees_grouped1)
jeu_donnees_filtre2 <- jeu_donnees %>%
group_by(Platform) %>%
filter(n() >= 100)
jeu_donnees_grouped2 <- jeu_donnees_filtre2 %>%
group_by(Platform) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(Global_Sales, na.rm = TRUE),
)
save2 <- jeu_donnees_grouped2$Publisher
jeu_donnees_grouped2 <- jeu_donnees_grouped2[,2:5]
row.names(jeu_donnees_grouped2) = save2
head(jeu_donnees_grouped2)
chisq.test(jeu_donnees_grouped2)
View(jeu_donnees_grouped2)
View(jeu_donnees_grouped2)
jeu_donnees_filtre2 <- jeu_donnees %>%
group_by(Platform) %>%
filter(n() >= 100)
jeu_donnees_grouped2 <- jeu_donnees_filtre2 %>%
group_by(Platform) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE),
Global_Sales = sum(Global_Sales, na.rm = TRUE),
)
save2 <- jeu_donnees_grouped2$Platform
jeu_donnees_grouped2 <- jeu_donnees_grouped2[,2:5]
row.names(jeu_donnees_grouped2) = save2
head(jeu_donnees_grouped2)
chisq.test(jeu_donnees_grouped2)
View(jeu_donnees_grouped2)
View(jeu_donnees_grouped2)
View(jeu_donnees_grouped2)
View(jeu_donnees_grouped2)
View(jeu_donnees_top)
View(jeu_donnees_top)
View(sales_data_top)
View(sales_data_top)
View(jeu_donnees_top)
View(jeu_donnees_top)
library(dplyr)
# On regroupe les jeux par Publisher qu'on compare aux différentes régions.
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100) # Pour plus de pertinence, nous gardons ceux avec au moins 100 jeux dans le jeu de données.
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
JP_Sales = sum(JP_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE)
)
save <- jeu_donnees_grouped$Publisher
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = save
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
# la p-value indique aucune liaisons entre ces 2 variables, il n'est pas nécessaire de faire l'AFC.
# Il y a peut-être une relation entre le genre de jeu et la région.
jeu_donnees_filtre1 <- jeu_donnees %>%
group_by(Genre) %>%
filter(n() >= 100)
jeu_donnees_grouped1 <- jeu_donnees_filtre1 %>%
group_by(Genre) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
JP_Sales = sum(JP_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE)
)
save1 <- jeu_donnees_grouped1$Genre
jeu_donnees_grouped1 <- jeu_donnees_grouped1[,2:5]
row.names(jeu_donnees_grouped1) = save1
head(jeu_donnees_grouped1)
chisq.test(jeu_donnees_grouped1)
jeu_donnees_filtre2 <- jeu_donnees %>%
group_by(Platform) %>%
filter(n() >= 100)
jeu_donnees_grouped2 <- jeu_donnees_filtre2 %>%
group_by(Platform) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
JP_Sales = sum(JP_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE)
)
save2 <- jeu_donnees_grouped2$Platform
jeu_donnees_grouped2 <- jeu_donnees_grouped2[,2:5]
row.names(jeu_donnees_grouped2) = save2
head(jeu_donnees_grouped2)
chisq.test(jeu_donnees_grouped2)
View(jeu_donnees_grouped)
View(jeu_donnees_grouped)
View(jeu_donnees_grouped1)
View(jeu_donnees_grouped1)
View(jeu_donnees_grouped2)
View(jeu_donnees_grouped2)
library(dplyr)
jeu_donnees_filtre1 <- jeu_donnees %>%
group_by(Genre) %>%
filter(n() >= 100)
jeu_donnees_grouped1 <- jeu_donnees_filtre1 %>%
group_by(Genre) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
JP_Sales = sum(JP_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE)
)
save1 <- jeu_donnees_grouped1$Genre
jeu_donnees_grouped1 <- jeu_donnees_grouped1[,2:5]
row.names(jeu_donnees_grouped1) = save1
head(jeu_donnees_grouped1)
chisq.test(jeu_donnees_grouped1)
# On regroupe les jeux par Publisher qu'on compare aux différentes régions.
jeu_donnees_filtre <- jeu_donnees %>%
group_by(Publisher) %>%
filter(n() >= 100) # Pour plus de pertinence, nous gardons ceux avec au moins 100 jeux dans le jeu de données.
jeu_donnees_grouped <- jeu_donnees_filtre %>%
group_by(Publisher) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
JP_Sales = sum(JP_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE)
)
save <- jeu_donnees_grouped$Publisher
jeu_donnees_grouped <- jeu_donnees_grouped[,2:5]
row.names(jeu_donnees_grouped) = save
head(jeu_donnees_grouped)
chisq.test(jeu_donnees_grouped)
# Comparons avec les plateformes.
jeu_donnees_filtre2 <- jeu_donnees %>%
group_by(Platform) %>%
filter(n() >= 100)
jeu_donnees_grouped2 <- jeu_donnees_filtre2 %>%
group_by(Platform) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
JP_Sales = sum(JP_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE)
)
save2 <- jeu_donnees_grouped2$Platform
jeu_donnees_grouped2 <- jeu_donnees_grouped2[,2:5]
row.names(jeu_donnees_grouped2) = save2
head(jeu_donnees_grouped2)
chisq.test(jeu_donnees_grouped2)
s1 = colSums(jeu_donnees_grouped1)
s1
barplot(s1, las = 2)
pie(s1)
s2 = rowSums(jeu_donnees_grouped1)
s2
barplot(s2, las = 2)
pie(s2)
res = CA(jeu_donnees_grouped1)
library(FactoMineR)
election = read.csv("Presidentielle.csv", row.names = 1)
#summary(election)
s1 = colSums(election)
s1
barplot(s1, las = 2)
pie(s1)
s2 = rowSums(election)
s2
barplot(s2, las = 2)
pie(s2)
chisq.test(election)
#p_value faible donc significativement dépendant
res = CA(election)
res$eig
barplot(res$eig[,2])
# on veut le top 3
res$col$contrib
plot(res, axes = c(1,3), invisible = "row")
plot(res, axes = c(1,2), invisible = "row")
plot(res, axes = c(2,3), invisible = "row", selectCol = "contrib 4")
# Nihous biaise tout
# comparer les 2 candidats ayant le plus contribué : l'axe montre une dualité entre les 2, on fait ca pour les 3 axes
res1 = CA(election, row.sup = 23, col.sup = c(11,12))
res1
res1$eig
plot(res1, axes = c(1,2), invisible = "row")
res1$col$contrib
plot(res1, axes = c(1,2), selectCol = "cos2 0.6", selectRow="cos2 0.6", cex = 0.6)
s1 = colSums(jeu_donnees_grouped1)
s1
barplot(s1, las = 2)
pie(s1)
s2 = rowSums(jeu_donnees_grouped1)
s2
barplot(s2, las = 2)
pie(s2)
res = CA(jeu_donnees_grouped1)
res$eig
barplot(res$eig[,2])
res$col$contrib
plot(res, axes = 1, invisible = "row")
plot(res, axes = c(1,2), invisible = "row")
